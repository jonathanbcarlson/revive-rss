<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Meltdown</title><id>https://blog.acolyer.org/2018/01/15/meltdown/</id><updated>2025-02-16T15:12:52.925515865+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/15/meltdown/" rel="alternate"/><content>Meltdown</content></entry><entry><title>Spectre attacks: exploiting speculative execution</title><id>https://blog.acolyer.org/2018/01/16/spectre-attacks-exploiting-speculative-execution/</id><updated>2025-02-17T15:15:24.263388583+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/16/spectre-attacks-exploiting-speculative-execution/" rel="alternate"/><content>Spectre attacks: exploiting speculative execution</content></entry><entry><title>Some thoughts on security after ten years of qmail 1.0</title><id>https://blog.acolyer.org/2018/01/17/some-thoughts-on-security-after-ten-years-of-qmail-1-0/</id><updated>2025-02-18T15:15:49.241887077+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/17/some-thoughts-on-security-after-ten-years-of-qmail-1-0/" rel="alternate"/><content>Some thoughts on security after ten years of qmail 1.0</content></entry><entry><title>RustBelt: securing the foundations of the Rust programming language</title><id>https://blog.acolyer.org/2018/01/18/rustbelt-securing-the-foundations-of-the-rust-programming-language/</id><updated>2025-02-19T15:15:52.105281077+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/18/rustbelt-securing-the-foundations-of-the-rust-programming-language/" rel="alternate"/><content>RustBelt: securing the foundations of the Rust programming language</content></entry><entry><title>JaVerT: JavaScript Verification Toolchain</title><id>https://blog.acolyer.org/2018/01/19/javert-javascript-verification-toolchain/</id><updated>2025-02-20T15:16:21.452445970+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/19/javert-javascript-verification-toolchain/" rel="alternate"/><content>JaVerT: JavaScript Verification Toolchain</content></entry><entry><title>Programming and proving with distributed protocols</title><id>https://blog.acolyer.org/2018/01/22/programming-and-proving-with-distributed-protocols/</id><updated>2025-02-21T15:14:46.988933614+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/22/programming-and-proving-with-distributed-protocols/" rel="alternate"/><content>Programming and proving with distributed protocols</content></entry><entry><title>Why is random testing effective for partition tolerance bugs?</title><id>https://blog.acolyer.org/2018/01/23/why-is-random-testing-effective-for-partition-tolerance-bugs/</id><updated>2025-02-22T15:12:55.395443986+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/23/why-is-random-testing-effective-for-partition-tolerance-bugs/" rel="alternate"/><content>Why is random testing effective for partition tolerance bugs?</content></entry><entry><title>Linear Haskell: Practical linearity in a higher-order polymorphic language</title><id>https://blog.acolyer.org/2018/01/24/linear-haskell-practical-linearity-in-a-higher-order-polymorphic-language/</id><updated>2025-02-23T15:12:53.227200141+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/24/linear-haskell-practical-linearity-in-a-higher-order-polymorphic-language/" rel="alternate"/><content>Linear Haskell: Practical linearity in a higher-order polymorphic language</content></entry><entry><title>A static verification framework for message passing in Go using behavioural types</title><id>https://blog.acolyer.org/2018/01/25/a-static-verification-framework-for-message-passing-in-go-using-behavioural-types/</id><updated>2025-02-24T15:16:47.505131467+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/25/a-static-verification-framework-for-message-passing-in-go-using-behavioural-types/" rel="alternate"/><content>A static verification framework for message passing in Go using behavioural types</content></entry><entry><title>A practitioner’s guide to reading programming languages papers</title><id>https://blog.acolyer.org/2018/01/26/a-practitioners-guide-to-reading-programming-languages-papers/</id><updated>2025-02-25T15:16:10.723691681+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/26/a-practitioners-guide-to-reading-programming-languages-papers/" rel="alternate"/><content>A practitioner’s guide to reading programming languages papers</content></entry></feed>