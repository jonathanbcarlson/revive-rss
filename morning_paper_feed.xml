<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>End of term</title><id>https://blog.acolyer.org/2017/12/15/end-of-term-2/</id><updated>2025-02-10T15:15:19.341046495+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/12/15/end-of-term-2/" rel="alternate"/><content>End of term</content></entry><entry><title>The case for learned index structures – part I</title><id>https://blog.acolyer.org/2018/01/08/the-case-for-learned-index-structures-part-i/</id><updated>2025-02-11T15:16:14.417999944+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/08/the-case-for-learned-index-structures-part-i/" rel="alternate"/><content>The case for learned index structures – part I</content></entry><entry><title>The case for learned index structures – Part II</title><id>https://blog.acolyer.org/2018/01/09/the-case-for-learned-index-structures-part-ii/</id><updated>2025-02-12T15:15:54.224718116+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/09/the-case-for-learned-index-structures-part-ii/" rel="alternate"/><content>The case for learned index structures – Part II</content></entry><entry><title>Mastering chess and shogi by self-play with a general reinforcement learning algorithm</title><id>https://blog.acolyer.org/2018/01/10/mastering-chess-and-shogi-by-self-play-with-a-general-reinforcement-learning-algorithm/</id><updated>2025-02-13T15:15:43.274517848+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/10/mastering-chess-and-shogi-by-self-play-with-a-general-reinforcement-learning-algorithm/" rel="alternate"/><content>Mastering chess and shogi by self-play with a general reinforcement learning algorithm</content></entry><entry><title>Emergent complexity via multi-agent competition</title><id>https://blog.acolyer.org/2018/01/11/emergent-complexity-via-multi-agent-competition/</id><updated>2025-02-14T15:15:12.545967807+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/11/emergent-complexity-via-multi-agent-competition/" rel="alternate"/><content>Emergent complexity via multi-agent competition</content></entry><entry><title>One model to learn them all</title><id>https://blog.acolyer.org/2018/01/12/one-model-to-learn-them-all/</id><updated>2025-02-15T15:13:21.694216647+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/12/one-model-to-learn-them-all/" rel="alternate"/><content>One model to learn them all</content></entry><entry><title>Meltdown</title><id>https://blog.acolyer.org/2018/01/15/meltdown/</id><updated>2025-02-16T15:12:52.925515865+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/15/meltdown/" rel="alternate"/><content>Meltdown</content></entry><entry><title>Spectre attacks: exploiting speculative execution</title><id>https://blog.acolyer.org/2018/01/16/spectre-attacks-exploiting-speculative-execution/</id><updated>2025-02-17T15:15:24.263388583+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/16/spectre-attacks-exploiting-speculative-execution/" rel="alternate"/><content>Spectre attacks: exploiting speculative execution</content></entry><entry><title>Some thoughts on security after ten years of qmail 1.0</title><id>https://blog.acolyer.org/2018/01/17/some-thoughts-on-security-after-ten-years-of-qmail-1-0/</id><updated>2025-02-18T15:15:49.241887077+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/17/some-thoughts-on-security-after-ten-years-of-qmail-1-0/" rel="alternate"/><content>Some thoughts on security after ten years of qmail 1.0</content></entry><entry><title>RustBelt: securing the foundations of the Rust programming language</title><id>https://blog.acolyer.org/2018/01/18/rustbelt-securing-the-foundations-of-the-rust-programming-language/</id><updated>2025-02-19T15:15:52.105281077+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/01/18/rustbelt-securing-the-foundations-of-the-rust-programming-language/" rel="alternate"/><content>RustBelt: securing the foundations of the Rust programming language</content></entry></feed>