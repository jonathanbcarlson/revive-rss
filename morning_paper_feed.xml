<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Distributed Snapshots: Determining Global States of Distributed Systems</title><id>https://blog.acolyer.org/2015/04/22/distributed-snapshots-determining-global-states-of-distributed-systems/</id><updated>2023-07-04T15:13:26.635746956+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/04/22/distributed-snapshots-determining-global-states-of-distributed-systems/" rel="alternate"/><content>Distributed Snapshots: Determining Global States of Distributed Systems</content></entry><entry><title>From the Aether to the Ethernet – Attacking the Internet using Broadcast Digital Television</title><id>https://blog.acolyer.org/2015/04/23/from-the-aether-to-the-ethernet-attacking-the-internet-using-broadcast-digital-television/</id><updated>2023-07-05T15:13:41.079179325+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/04/23/from-the-aether-to-the-ethernet-attacking-the-internet-using-broadcast-digital-television/" rel="alternate"/><content>From the Aether to the Ethernet – Attacking the Internet using Broadcast Digital Television</content></entry><entry><title>The Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors</title><id>https://blog.acolyer.org/2015/04/24/the-scalable-commutativity-rule-designing-scalable-software-for-multicore-processors/</id><updated>2023-07-06T15:14:25.402621564+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/04/24/the-scalable-commutativity-rule-designing-scalable-software-for-multicore-processors/" rel="alternate"/><content>The Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors</content></entry><entry><title>Musketeer – Part I : What’s the best data processing system?</title><id>https://blog.acolyer.org/2015/04/27/musketeer-part-i-whats-the-best-data-processing-system/</id><updated>2023-07-07T15:13:09.529757708+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/04/27/musketeer-part-i-whats-the-best-data-processing-system/" rel="alternate"/><content>Musketeer – Part I : What’s the best data processing system?</content></entry><entry><title>Musketeer – Part II: all for one, and one for all in data processing systems</title><id>https://blog.acolyer.org/2015/04/28/musketeer-part-ii-one-for-all-and-all-for-one/</id><updated>2023-07-08T15:11:57.538888908+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/04/28/musketeer-part-ii-one-for-all-and-all-for-one/" rel="alternate"/><content>Musketeer – Part II: all for one, and one for all in data processing systems</content></entry><entry><title>Applying the Universal Scalability Law to organisations</title><id>https://blog.acolyer.org/2015/04/29/applying-the-universal-scalability-law-to-organisations/</id><updated>2023-07-09T15:12:00.914921836+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/04/29/applying-the-universal-scalability-law-to-organisations/" rel="alternate"/><content>Applying the Universal Scalability Law to organisations</content></entry><entry><title>Scaling Concurrent Log-Structured Data Stores</title><id>https://blog.acolyer.org/2015/04/30/scaling-concurrent-log-structured-data-stores/</id><updated>2023-07-10T15:13:23.673325285+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/04/30/scaling-concurrent-log-structured-data-stores/" rel="alternate"/><content>Scaling Concurrent Log-Structured Data Stores</content></entry><entry><title>Staring into the abyss: An evaluation of concurrency control with one thousand cores</title><id>https://blog.acolyer.org/2015/05/01/staring-into-the-abyss-an-evaluation-of-concurrency-control-with-one-thousand-cores/</id><updated>2023-07-11T15:13:14.445557487+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/05/01/staring-into-the-abyss-an-evaluation-of-concurrency-control-with-one-thousand-cores/" rel="alternate"/><content>Staring into the abyss: An evaluation of concurrency control with one thousand cores</content></entry><entry><title>Putting Consistency Back into Eventual Consistency</title><id>https://blog.acolyer.org/2015/05/04/putting-consistency-back-into-eventual-consistency/</id><updated>2023-07-12T15:13:26.470888221+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/05/04/putting-consistency-back-into-eventual-consistency/" rel="alternate"/><content>Putting Consistency Back into Eventual Consistency</content></entry><entry><title>Taming uncertainty in distributed systems with help from the network</title><id>https://blog.acolyer.org/2015/05/05/taming-uncertainty-in-distributed-systems-with-help-from-the-network/</id><updated>2023-07-13T15:13:37.861161415+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/05/05/taming-uncertainty-in-distributed-systems-with-help-from-the-network/" rel="alternate"/><content>Taming uncertainty in distributed systems with help from the network</content></entry></feed>