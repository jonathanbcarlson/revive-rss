<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Struc2vec: learning node representations from structural identity</title><id>https://blog.acolyer.org/2017/09/15/struc2vec-learning-node-representations-from-structural-identity/</id><updated>2024-12-07T15:14:50.419879842+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/15/struc2vec-learning-node-representations-from-structural-identity/" rel="alternate"/><content>Struc2vec: learning node representations from structural identity</content></entry><entry><title>Bringing the web up to speed with WebAssembly</title><id>https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/</id><updated>2024-12-08T15:14:48.587285431+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/" rel="alternate"/><content>Bringing the web up to speed with WebAssembly</content></entry><entry><title>To type or not to type: quantifying detectable bugs in JavaScript</title><id>https://blog.acolyer.org/2017/09/19/to-type-or-not-to-type-quantifying-detectable-bugs-in-javascript/</id><updated>2024-12-09T15:16:28.957031131+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/19/to-type-or-not-to-type-quantifying-detectable-bugs-in-javascript/" rel="alternate"/><content>To type or not to type: quantifying detectable bugs in JavaScript</content></entry><entry><title>A longitudinal, end-to-end view of the DNSSEC ecosystem</title><id>https://blog.acolyer.org/2017/09/20/a-longitudinal-end-to-end-view-of-the-dnssec-ecosystem/</id><updated>2024-12-10T15:16:33.338067676+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/20/a-longitudinal-end-to-end-view-of-the-dnssec-ecosystem/" rel="alternate"/><content>A longitudinal, end-to-end view of the DNSSEC ecosystem</content></entry><entry><title>CLKSCREW: Exposing the perils of security-oblivious energy management</title><id>https://blog.acolyer.org/2017/09/21/clkscrew-exposing-the-perils-of-security-oblivious-energy-management/</id><updated>2024-12-11T15:16:20.387732430+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/21/clkscrew-exposing-the-perils-of-security-oblivious-energy-management/" rel="alternate"/><content>CLKSCREW: Exposing the perils of security-oblivious energy management</content></entry><entry><title>Distributed deep neural networks over the cloud, the edge, and end devices</title><id>https://blog.acolyer.org/2017/09/22/distributed-deep-neural-networks-over-the-cloud-the-edge-and-end-devices/</id><updated>2024-12-12T15:16:09.205398233+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/22/distributed-deep-neural-networks-over-the-cloud-the-edge-and-end-devices/" rel="alternate"/><content>Distributed deep neural networks over the cloud, the edge, and end devices</content></entry><entry><title>A dirty dozen: twelve common metric interpretation pitfalls in online controlled experiments</title><id>https://blog.acolyer.org/2017/09/25/a-dirty-dozen-twelve-common-metric-interpretation-pitfalls-in-online-controlled-experiments/</id><updated>2024-12-13T15:15:49.055600636+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/25/a-dirty-dozen-twelve-common-metric-interpretation-pitfalls-in-online-controlled-experiments/" rel="alternate"/><content>A dirty dozen: twelve common metric interpretation pitfalls in online controlled experiments</content></entry><entry><title>Seven rules of thumb for web site experimenters</title><id>https://blog.acolyer.org/2017/09/26/seven-rules-of-thumb-for-web-site-experimenters/</id><updated>2024-12-14T15:14:17.097261798+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/26/seven-rules-of-thumb-for-web-site-experimenters/" rel="alternate"/><content>Seven rules of thumb for web site experimenters</content></entry><entry><title>An efficient bandit algorithm for real-time multivariate optimization</title><id>https://blog.acolyer.org/2017/09/27/an-efficient-bandit-algorithm-for-real-time-multivariate-optimization/</id><updated>2024-12-15T15:13:54.887527894+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/27/an-efficient-bandit-algorithm-for-real-time-multivariate-optimization/" rel="alternate"/><content>An efficient bandit algorithm for real-time multivariate optimization</content></entry><entry><title>Peeking at A/B tests: continuous monitoring without pain</title><id>https://blog.acolyer.org/2017/09/28/peeking-at-ab-tests-continuous-monitoring-without-pain/</id><updated>2024-12-16T15:16:22.890152538+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2017/09/28/peeking-at-ab-tests-continuous-monitoring-without-pain/" rel="alternate"/><content>Peeking at A/B tests: continuous monitoring without pain</content></entry></feed>