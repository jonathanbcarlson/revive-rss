<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Towards a theory of software development expertise</title><id>https://blog.acolyer.org/2018/12/21/towards-a-theory-of-software-development-expertise/</id><updated>2025-08-11T15:19:03.257780486+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/12/21/towards-a-theory-of-software-development-expertise/" rel="alternate"/><content>Towards a theory of software development expertise</content></entry><entry><title>The tradeoffs of large scale learning</title><id>https://blog.acolyer.org/2019/01/07/the-tradeoffs-of-large-scale-learning/</id><updated>2025-08-12T15:18:27.287168465+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/07/the-tradeoffs-of-large-scale-learning/" rel="alternate"/><content>The tradeoffs of large scale learning</content></entry><entry><title>Neural Ordinary Differential Equations</title><id>https://blog.acolyer.org/2019/01/09/neural-ordinary-differential-equations/</id><updated>2025-08-13T15:15:13.806510766+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/09/neural-ordinary-differential-equations/" rel="alternate"/><content>Neural Ordinary Differential Equations</content></entry><entry><title>Unsupervised learning of artistic styles with archetypal style analysis</title><id>https://blog.acolyer.org/2019/01/11/unsupervised-learning-of-artistic-styles-with-archetypal-style-analysis/</id><updated>2025-08-14T15:18:21.586400392+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/11/unsupervised-learning-of-artistic-styles-with-archetypal-style-analysis/" rel="alternate"/><content>Unsupervised learning of artistic styles with archetypal style analysis</content></entry><entry><title>Serverless computing: one step forward, two steps back</title><id>https://blog.acolyer.org/2019/01/14/serverless-computing-one-step-forward-two-steps-back/</id><updated>2025-08-15T15:17:22.172093260+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/14/serverless-computing-one-step-forward-two-steps-back/" rel="alternate"/><content>Serverless computing: one step forward, two steps back</content></entry><entry><title>SageDB: a learned database system</title><id>https://blog.acolyer.org/2019/01/16/sagedb-a-learned-database-system/</id><updated>2025-08-16T15:14:53.945961714+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/16/sagedb-a-learned-database-system/" rel="alternate"/><content>SageDB: a learned database system</content></entry><entry><title>Towards a hands-free query optimizer through deep learning</title><id>https://blog.acolyer.org/2019/01/18/towards-a-hands-free-query-optimizer-through-deep-learning/</id><updated>2025-08-17T15:15:32.053008957+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/18/towards-a-hands-free-query-optimizer-through-deep-learning/" rel="alternate"/><content>Towards a hands-free query optimizer through deep learning</content></entry><entry><title>Design continuums and the path toward self-designing key-value stores that know and learn</title><id>https://blog.acolyer.org/2019/01/21/design-continuums-and-the-path-toward-self-designing-key-value-stores-that-know-and-learn/</id><updated>2025-08-18T15:18:31.629989620+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/21/design-continuums-and-the-path-toward-self-designing-key-value-stores-that-know-and-learn/" rel="alternate"/><content>Design continuums and the path toward self-designing key-value stores that know and learn</content></entry><entry><title>The data calculator: data structure design and cost synthesis from first principles and learned cost models</title><id>https://blog.acolyer.org/2019/01/23/the-data-calculator-data-structure-design-and-cost-synthesis-from-first-principles-and-learned-cost-models/</id><updated>2025-08-19T15:17:40.668271515+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/23/the-data-calculator-data-structure-design-and-cost-synthesis-from-first-principles-and-learned-cost-models/" rel="alternate"/><content>The data calculator: data structure design and cost synthesis from first principles and learned cost models</content></entry><entry><title>Programming paradigms for dummies: what every programmer should know</title><id>https://blog.acolyer.org/2019/01/25/programming-paradigms-for-dummies-what-every-programmer-should-know/</id><updated>2025-08-20T15:17:06.670653927+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/25/programming-paradigms-for-dummies-what-every-programmer-should-know/" rel="alternate"/><content>Programming paradigms for dummies: what every programmer should know</content></entry></feed>