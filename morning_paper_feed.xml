<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>A language-based approach to unifying events and threads</title><id>https://blog.acolyer.org/2014/12/11/a-language-based-approach-to-unifying-events-and-threads/</id><updated>2023-04-14T15:12:29.960400223+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2014/12/11/a-language-based-approach-to-unifying-events-and-threads/" rel="alternate"/><content>A language-based approach to unifying events and threads</content></entry><entry><title>Scala Actors: Unifying thread-based and event-based programming</title><id>https://blog.acolyer.org/2014/12/12/scala-actors-unifying-thread-based-and-event-based-programming/</id><updated>2023-04-15T15:11:23.929553386+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2014/12/12/scala-actors-unifying-thread-based-and-event-based-programming/" rel="alternate"/><content>Scala Actors: Unifying thread-based and event-based programming</content></entry><entry><title>Predicate Logic as Programming Language</title><id>https://blog.acolyer.org/2014/12/15/predicate-logic-as-programming-language/</id><updated>2023-04-16T15:11:26.671406380+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2014/12/15/predicate-logic-as-programming-language/" rel="alternate"/><content>Predicate Logic as Programming Language</content></entry><entry><title>f4: Facebook’s warm BLOB storage system</title><id>https://blog.acolyer.org/2014/12/16/f4-facebooks-warm-blob-storage-system/</id><updated>2023-04-17T15:13:06.904874251+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2014/12/16/f4-facebooks-warm-blob-storage-system/" rel="alternate"/><content>f4: Facebook’s warm BLOB storage system</content></entry><entry><title>A Hitchhiker’s Guide to Fast and Efficient Data Reconstruction in Erasure-coded Data Centers</title><id>https://blog.acolyer.org/2014/12/17/a-hitchhikers-guide-to-fast-and-efficient-data-reconstruction-in-erasure-coded-data-centers/</id><updated>2023-04-18T15:14:15.933379021+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2014/12/17/a-hitchhikers-guide-to-fast-and-efficient-data-reconstruction-in-erasure-coded-data-centers/" rel="alternate"/><content>A Hitchhiker’s Guide to Fast and Efficient Data Reconstruction in Erasure-coded Data Centers</content></entry><entry><title>The Network is Reliable</title><id>https://blog.acolyer.org/2014/12/18/the-network-is-reliable/</id><updated>2023-04-19T15:13:14.605747040+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2014/12/18/the-network-is-reliable/" rel="alternate"/><content>The Network is Reliable</content></entry><entry><title>Derflow: Distributed Deterministic Dataflow programming for Erlang</title><id>https://blog.acolyer.org/2014/12/19/derflow-distributed-deterministic-dataflow-programming-for-erlang/</id><updated>2023-04-20T15:12:41.453333770+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2014/12/19/derflow-distributed-deterministic-dataflow-programming-for-erlang/" rel="alternate"/><content>Derflow: Distributed Deterministic Dataflow programming for Erlang</content></entry><entry><title>Blazes: Coordination analysis for distributed programs</title><id>https://blog.acolyer.org/2015/01/05/blazes-coordination-analysis-for-distributed-programs/</id><updated>2023-04-21T15:12:29.698921600+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/01/05/blazes-coordination-analysis-for-distributed-programs/" rel="alternate"/><content>Blazes: Coordination analysis for distributed programs</content></entry><entry><title>F1: A Distributed SQL Database That Scales</title><id>https://blog.acolyer.org/2015/01/06/f1-a-distributed-sql-database-that-scales/</id><updated>2023-04-22T15:12:27.715699747+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/01/06/f1-a-distributed-sql-database-that-scales/" rel="alternate"/><content>F1: A Distributed SQL Database That Scales</content></entry><entry><title>Online, Aysnchronous Schema Change in F1</title><id>https://blog.acolyer.org/2015/01/07/online-aysnchronous-schema-change-in-f1/</id><updated>2023-04-23T15:11:43.793616490+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/01/07/online-aysnchronous-schema-change-in-f1/" rel="alternate"/><content>Online, Aysnchronous Schema Change in F1</content></entry></feed>