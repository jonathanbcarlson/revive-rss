<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>IronFleet: Proving Practical Distributed Systems Correct</title><id>https://blog.acolyer.org/2015/10/15/ironfleet-proving-practical-distributed-systems-correc/</id><updated>2023-10-15T15:10:30.593165839+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/15/ironfleet-proving-practical-distributed-systems-correc/" rel="alternate"/><content>IronFleet: Proving Practical Distributed Systems Correct</content></entry><entry><title>Holistic Configuration Management at Facebook</title><id>https://blog.acolyer.org/2015/10/16/holistic-configuration-management-at-facebook/</id><updated>2023-10-16T15:12:56.308421031+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/16/holistic-configuration-management-at-facebook/" rel="alternate"/><content>Holistic Configuration Management at Facebook</content></entry><entry><title>Existential Consistency: Measuring and Understanding Consistency at Facebook</title><id>https://blog.acolyer.org/2015/10/19/existential-consistency-measuring-and-understanding-consistency-at-facebook/</id><updated>2023-10-17T15:12:48.766616992+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/19/existential-consistency-measuring-and-understanding-consistency-at-facebook/" rel="alternate"/><content>Existential Consistency: Measuring and Understanding Consistency at Facebook</content></entry><entry><title>High-Performance ACID via Modular Concurrency Control</title><id>https://blog.acolyer.org/2015/10/20/high-performance-acid-via-modular-concurrency-control/</id><updated>2023-10-18T15:12:30.815547536+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/20/high-performance-acid-via-modular-concurrency-control/" rel="alternate"/><content>High-Performance ACID via Modular Concurrency Control</content></entry><entry><title>Building Consistent Transactions with Inconsistent Replication</title><id>https://blog.acolyer.org/2015/10/21/building-consistent-transactions-with-inconsistent-replication/</id><updated>2023-10-19T15:12:39.279037770+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/21/building-consistent-transactions-with-inconsistent-replication/" rel="alternate"/><content>Building Consistent Transactions with Inconsistent Replication</content></entry><entry><title>Implementing Linearizability at Large Scale and Low Latency</title><id>https://blog.acolyer.org/2015/10/22/implementing-linearizability-at-large-scale-and-low-latency/</id><updated>2023-10-20T15:10:31.795981577+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/22/implementing-linearizability-at-large-scale-and-low-latency/" rel="alternate"/><content>Implementing Linearizability at Large Scale and Low Latency</content></entry><entry><title>Vuvuzela: Scalable Private Messaging Resistant to Traffic Analysis</title><id>https://blog.acolyer.org/2015/10/23/vuvuzela-scalable-private-messaging-resistant-to-traffic-analysis/</id><updated>2023-10-21T15:10:23.461242801+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/23/vuvuzela-scalable-private-messaging-resistant-to-traffic-analysis/" rel="alternate"/><content>Vuvuzela: Scalable Private Messaging Resistant to Traffic Analysis</content></entry><entry><title>Fast In-memory Transaction Processing using RDMA and HTM</title><id>https://blog.acolyer.org/2015/10/26/fast-in-memory-transaction-processing-using-rdma-and-rtm/</id><updated>2023-10-22T15:10:38.134372514+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/26/fast-in-memory-transaction-processing-using-rdma-and-rtm/" rel="alternate"/><content>Fast In-memory Transaction Processing using RDMA and HTM</content></entry><entry><title>Read-Log-Update: A Lightweight Synchronization Mechanism for Concurrent Programming</title><id>https://blog.acolyer.org/2015/10/27/read-log-update-a-lightweight-synchronization-mechanism-for-concurrent-programming/</id><updated>2023-10-23T15:12:27.594759223+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/27/read-log-update-a-lightweight-synchronization-mechanism-for-concurrent-programming/" rel="alternate"/><content>Read-Log-Update: A Lightweight Synchronization Mechanism for Concurrent Programming</content></entry><entry><title>Split-Level IO Scheduling</title><id>https://blog.acolyer.org/2015/10/28/split-level-io-scheduling/</id><updated>2023-10-24T15:13:02.877878563+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/28/split-level-io-scheduling/" rel="alternate"/><content>Split-Level IO Scheduling</content></entry></feed>