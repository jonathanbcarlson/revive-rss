<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Time evolving graph processing at scale</title><id>https://blog.acolyer.org/2016/09/26/time-evolving-graph-processing-at-scale/</id><updated>2024-04-29T15:11:50.864591075+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/09/26/time-evolving-graph-processing-at-scale/" rel="alternate"/><content>Time evolving graph processing at scale</content></entry><entry><title>Flexible Paxos: Quorum intersection revisited</title><id>https://blog.acolyer.org/2016/09/27/flexible-paxos-quorum-intersection-revisited/</id><updated>2024-04-30T15:10:06.761587484+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/09/27/flexible-paxos-quorum-intersection-revisited/" rel="alternate"/><content>Flexible Paxos: Quorum intersection revisited</content></entry><entry><title>Distributed consensus and the implications of NVM on database management systems</title><id>https://blog.acolyer.org/2016/09/28/distributed-consensus-and-the-implications-of-nvm-on-database-management-systems/</id><updated>2024-05-01T15:11:24.905117641+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/09/28/distributed-consensus-and-the-implications-of-nvm-on-database-management-systems/" rel="alternate"/><content>Distributed consensus and the implications of NVM on database management systems</content></entry><entry><title>Let’s talk about storage and recovery methods for non-volatile memory database systems</title><id>https://blog.acolyer.org/2016/09/29/lets-talk-about-storage-and-recovery-methods-for-non-volatile-memory-database-systems/</id><updated>2024-05-02T15:12:41.022324269+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/09/29/lets-talk-about-storage-and-recovery-methods-for-non-volatile-memory-database-systems/" rel="alternate"/><content>Let’s talk about storage and recovery methods for non-volatile memory database systems</content></entry><entry><title>Write-limited sorts and joins for persistent memory</title><id>https://blog.acolyer.org/2016/09/30/write-limited-sorts-and-joins-for-persistent-memory/</id><updated>2024-05-03T15:12:33.904821290+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/09/30/write-limited-sorts-and-joins-for-persistent-memory/" rel="alternate"/><content>Write-limited sorts and joins for persistent memory</content></entry><entry><title>The load, capacity, and availability of quorum systems</title><id>https://blog.acolyer.org/2016/10/03/the-load-capacity-and-availability-of-quorum-systems/</id><updated>2024-05-04T15:11:44.887430376+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/03/the-load-capacity-and-availability-of-quorum-systems/" rel="alternate"/><content>The load, capacity, and availability of quorum systems</content></entry><entry><title>Cyclades: Conflict-free asynchronous machine learning</title><id>https://blog.acolyer.org/2016/10/04/cyclades-conflict-free-asynchronous-machine-learning/</id><updated>2024-05-05T15:12:43.056673642+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/04/cyclades-conflict-free-asynchronous-machine-learning/" rel="alternate"/><content>Cyclades: Conflict-free asynchronous machine learning</content></entry><entry><title>Why does deep and cheap learning work so well?</title><id>https://blog.acolyer.org/2016/10/05/why-does-deep-and-cheap-learning-work-so-well/</id><updated>2024-05-06T15:12:25.742098941+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/05/why-does-deep-and-cheap-learning-work-so-well/" rel="alternate"/><content>Why does deep and cheap learning work so well?</content></entry><entry><title>Simple testing can prevent most critical failures</title><id>https://blog.acolyer.org/2016/10/06/simple-testing-can-prevent-most-critical-failures/</id><updated>2024-05-07T15:11:27.550422725+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/06/simple-testing-can-prevent-most-critical-failures/" rel="alternate"/><content>Simple testing can prevent most critical failures</content></entry><entry><title>Incremental knowledge base construction using DeepDive</title><id>https://blog.acolyer.org/2016/10/07/incremental-knowledge-base-construction-using-deepdive/</id><updated>2024-05-08T15:12:06.054677486+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/07/incremental-knowledge-base-construction-using-deepdive/" rel="alternate"/><content>Incremental knowledge base construction using DeepDive</content></entry></feed>