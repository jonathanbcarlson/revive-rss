<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>On the “naturalness” of buggy code</title><id>https://blog.acolyer.org/2016/06/08/on-the-naturalness-of-buggy-code/</id><updated>2024-03-12T15:11:10.980622900+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/08/on-the-naturalness-of-buggy-code/" rel="alternate"/><content>On the “naturalness” of buggy code</content></entry><entry><title>Design Rule Spaces: A new form of architectural insight</title><id>https://blog.acolyer.org/2016/06/09/design-rule-spaces-a-new-form-of-architectural-insight/</id><updated>2024-03-13T15:12:24.698011486+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/09/design-rule-spaces-a-new-form-of-architectural-insight/" rel="alternate"/><content>Design Rule Spaces: A new form of architectural insight</content></entry><entry><title>Hotspot Patterns: The formal definition and automatic detection of architecture smells</title><id>https://blog.acolyer.org/2016/06/10/hotspot-patterns-the-formal-definition-and-automatic-detection-of-architecture-smells/</id><updated>2024-03-14T15:31:02.065095648+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/10/hotspot-patterns-the-formal-definition-and-automatic-detection-of-architecture-smells/" rel="alternate"/><content>Hotspot Patterns: The formal definition and automatic detection of architecture smells</content></entry><entry><title>Identifying and quantifying architectural debt</title><id>https://blog.acolyer.org/2016/06/13/identifying-and-quantifying-architectural-debt/</id><updated>2024-03-15T15:11:16.619903160+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/13/identifying-and-quantifying-architectural-debt/" rel="alternate"/><content>Identifying and quantifying architectural debt</content></entry><entry><title>Arrakis: the operating system is the control plane</title><id>https://blog.acolyer.org/2016/06/14/arrakis-the-operating-system-is-the-control-plane/</id><updated>2024-03-16T15:10:12.416050363+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/14/arrakis-the-operating-system-is-the-control-plane/" rel="alternate"/><content>Arrakis: the operating system is the control plane</content></entry><entry><title>IX: A protected dataplane operating system for high throughput and low latency</title><id>https://blog.acolyer.org/2016/06/15/ix-a-protected-dataplane-operating-system-for-high-throughput-and-low-latency/</id><updated>2024-03-17T15:11:37.753574370+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/15/ix-a-protected-dataplane-operating-system-for-high-throughput-and-low-latency/" rel="alternate"/><content>IX: A protected dataplane operating system for high throughput and low latency</content></entry><entry><title>Shielding applications from an untrusted cloud with Haven</title><id>https://blog.acolyer.org/2016/06/16/shielding-applications-from-an-untrusted-cloud-with-haven/</id><updated>2024-03-18T15:11:16.301736785+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/16/shielding-applications-from-an-untrusted-cloud-with-haven/" rel="alternate"/><content>Shielding applications from an untrusted cloud with Haven</content></entry><entry><title>E2: A framework for NFV applications</title><id>https://blog.acolyer.org/2016/06/17/e2-a-framework-for-nfv-applications/</id><updated>2024-03-19T15:12:24.588199238+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/17/e2-a-framework-for-nfv-applications/" rel="alternate"/><content>E2: A framework for NFV applications</content></entry><entry><title>Multi-context TLS (mcTLS): Enabling secure in-network functionality in TLS</title><id>https://blog.acolyer.org/2016/06/20/multi-context-tls-mctls-enabling-secure-in-network-functionality-in-tls/</id><updated>2024-03-20T15:12:27.989926214+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/20/multi-context-tls-mctls-enabling-secure-in-network-functionality-in-tls/" rel="alternate"/><content>Multi-context TLS (mcTLS): Enabling secure in-network functionality in TLS</content></entry><entry><title>BlindBox: Deep packet inspection over encrypted traffic</title><id>https://blog.acolyer.org/2016/06/21/blindbox-deep-packet-inspection-over-encrypted-traffic/</id><updated>2024-03-21T15:12:35.601415404+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/21/blindbox-deep-packet-inspection-over-encrypted-traffic/" rel="alternate"/><content>BlindBox: Deep packet inspection over encrypted traffic</content></entry></feed>