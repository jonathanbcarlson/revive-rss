<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>The Good, the Bad, and the Ugly: An Empirical Study of Implicit Type Conversions in JavaScript</title><id>https://blog.acolyer.org/2015/08/04/the-good-the-bad-and-the-ugly-an-empirical-study-of-implicit-type-conversions-in-javascript/</id><updated>2023-08-24T15:11:49.892175425+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/04/the-good-the-bad-and-the-ugly-an-empirical-study-of-implicit-type-conversions-in-javascript/" rel="alternate"/><content>The Good, the Bad, and the Ugly: An Empirical Study of Implicit Type Conversions in JavaScript</content></entry><entry><title>Optimization Coaching for JavaScript</title><id>https://blog.acolyer.org/2015/08/05/optimization-coaching-for-javascript/</id><updated>2023-08-25T15:11:34.910828928+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/05/optimization-coaching-for-javascript/" rel="alternate"/><content>Optimization Coaching for JavaScript</content></entry><entry><title>Cooking the Books: Formalizing the JMM Implementation Recipes</title><id>https://blog.acolyer.org/2015/08/06/cooking-the-books-formalizing-the-jmm-implementation-recipes/</id><updated>2023-08-26T15:10:21.362431110+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/06/cooking-the-books-formalizing-the-jmm-implementation-recipes/" rel="alternate"/><content>Cooking the Books: Formalizing the JMM Implementation Recipes</content></entry><entry><title>Access Rights Analysis in the Presence of Subjects</title><id>https://blog.acolyer.org/2015/08/07/access-rights-analysis-in-the-presence-of-subjects/</id><updated>2023-08-27T15:10:10.933982063+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/07/access-rights-analysis-in-the-presence-of-subjects/" rel="alternate"/><content>Access Rights Analysis in the Presence of Subjects</content></entry><entry><title>Eventually Consistent Transactions</title><id>https://blog.acolyer.org/2015/08/10/eventually-consistent-transactions/</id><updated>2023-08-28T15:11:36.589746028+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/10/eventually-consistent-transactions/" rel="alternate"/><content>Eventually Consistent Transactions</content></entry><entry><title>Cloud Types for Eventual Consistency</title><id>https://blog.acolyer.org/2015/08/11/cloud-types-for-eventual-consistency/</id><updated>2023-08-29T15:11:42.193030827+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/11/cloud-types-for-eventual-consistency/" rel="alternate"/><content>Cloud Types for Eventual Consistency</content></entry><entry><title>Global Sequence Protocol</title><id>https://blog.acolyer.org/2015/08/12/global-sequence-protocol/</id><updated>2023-08-30T15:12:16.436178064+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/12/global-sequence-protocol/" rel="alternate"/><content>Global Sequence Protocol</content></entry><entry><title>Streams à la carte: Extensible pipelines with object algebras</title><id>https://blog.acolyer.org/2015/08/13/streams-a-la-carte-extensible-pipelines-with-object-algebras/</id><updated>2023-08-31T15:12:03.128286407+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/13/streams-a-la-carte-extensible-pipelines-with-object-algebras/" rel="alternate"/><content>Streams à la carte: Extensible pipelines with object algebras</content></entry><entry><title>PerfBlower: Quickly Detecting Memory-Related Performance Problems via Amplification</title><id>https://blog.acolyer.org/2015/08/14/perfblower-quickly-detecting-memory-related-performance-problems-via-amplification/</id><updated>2023-09-01T15:11:25.551540456+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/14/perfblower-quickly-detecting-memory-related-performance-problems-via-amplification/" rel="alternate"/><content>PerfBlower: Quickly Detecting Memory-Related Performance Problems via Amplification</content></entry><entry><title>Lasp: A language for distributed, coordination-free programming</title><id>https://blog.acolyer.org/2015/08/17/lasp-a-language-for-distributed-coordination-free-programming/</id><updated>2023-09-02T15:09:51.203218894+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/08/17/lasp-a-language-for-distributed-coordination-free-programming/" rel="alternate"/><content>Lasp: A language for distributed, coordination-free programming</content></entry></feed>