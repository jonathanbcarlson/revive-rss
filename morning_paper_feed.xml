<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Hierarchical program structures</title><id>https://blog.acolyer.org/2016/10/18/hierarchical-program-structures/</id><updated>2024-05-15T15:11:41.826721340+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/18/hierarchical-program-structures/" rel="alternate"/><content>Hierarchical program structures</content></entry><entry><title>Protection in programming languages</title><id>https://blog.acolyer.org/2016/10/19/protection-in-programming-languages/</id><updated>2024-05-16T15:12:11.380319745+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/19/protection-in-programming-languages/" rel="alternate"/><content>Protection in programming languages</content></entry><entry><title>Programming with Abstract Data Types</title><id>https://blog.acolyer.org/2016/10/20/programming-with-abstract-data-types/</id><updated>2024-05-17T15:12:32.350484124+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/20/programming-with-abstract-data-types/" rel="alternate"/><content>Programming with Abstract Data Types</content></entry><entry><title>A design methodology for reliable software systems</title><id>https://blog.acolyer.org/2016/10/21/a-design-methodology-for-reliable-software-systems/</id><updated>2024-05-18T15:12:59.528488448+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/21/a-design-methodology-for-reliable-software-systems/" rel="alternate"/><content>A design methodology for reliable software systems</content></entry><entry><title>What’s wrong with Git? A conceptual design analysis</title><id>https://blog.acolyer.org/2016/10/24/whats-wrong-with-git-a-conceptual-design-analysis/</id><updated>2024-05-19T15:11:17.639456014+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/24/whats-wrong-with-git-a-conceptual-design-analysis/" rel="alternate"/><content>What’s wrong with Git? A conceptual design analysis</content></entry><entry><title>Purposes, concepts, misfits, and a redesign of Git</title><id>https://blog.acolyer.org/2016/10/25/purposes-concepts-misfits-and-a-redesign-of-git/</id><updated>2024-05-20T15:13:06.320084480+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/25/purposes-concepts-misfits-and-a-redesign-of-git/" rel="alternate"/><content>Purposes, concepts, misfits, and a redesign of Git</content></entry><entry><title>Preemptive intrusion detection: theoretical framework and real-world measurements</title><id>https://blog.acolyer.org/2016/10/26/preemptive-intrusion-detection-theoretical-framework-and-real-world-measurements/</id><updated>2024-05-21T15:12:53.017115549+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/26/preemptive-intrusion-detection-theoretical-framework-and-real-world-measurements/" rel="alternate"/><content>Preemptive intrusion detection: theoretical framework and real-world measurements</content></entry><entry><title>Replex: A scalable, highly available multi-index data store</title><id>https://blog.acolyer.org/2016/10/27/replex-a-scalable-highly-available-multi-index-data-store/</id><updated>2024-05-22T15:13:12.327091786+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/27/replex-a-scalable-highly-available-multi-index-data-store/" rel="alternate"/><content>Replex: A scalable, highly available multi-index data store</content></entry><entry><title>A Bayesian approach to graphical record linkage and de-duplication</title><id>https://blog.acolyer.org/2016/10/28/a-bayesian-approach-to-graphical-record-linkage-and-de-duplication/</id><updated>2024-05-23T15:13:16.945664715+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/28/a-bayesian-approach-to-graphical-record-linkage-and-de-duplication/" rel="alternate"/><content>A Bayesian approach to graphical record linkage and de-duplication</content></entry><entry><title>Designing software for ease of extension and contraction</title><id>https://blog.acolyer.org/2016/10/31/designing-software-for-ease-of-extension-and-contraction/</id><updated>2024-05-24T15:13:34.302076071+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/10/31/designing-software-for-ease-of-extension-and-contraction/" rel="alternate"/><content>Designing software for ease of extension and contraction</content></entry></feed>