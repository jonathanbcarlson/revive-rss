<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Maelstrom: mitigating datacenter-level disasters by draining interdependent traffic safely and efficiently</title><id>https://blog.acolyer.org/2018/10/24/maelstrom-mitigating-datacenter-level-disasters-by-draining-interdependent-traffic-safely-and-efficiently/</id><updated>2025-07-17T15:18:54.043625068+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/24/maelstrom-mitigating-datacenter-level-disasters-by-draining-interdependent-traffic-safely-and-efficiently/" rel="alternate"/><content>Maelstrom: mitigating datacenter-level disasters by draining interdependent traffic safely and efficiently</content></entry><entry><title>RobinHood: tail latency aware caching – dynamic reallocation from cache-rich to cache-poor</title><id>https://blog.acolyer.org/2018/10/26/robinhood-tail-latency-aware-caching-dynamic-reallocation-from-cache-rich-to-cache-poor/</id><updated>2025-07-18T15:17:49.498680731+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/26/robinhood-tail-latency-aware-caching-dynamic-reallocation-from-cache-rich-to-cache-poor/" rel="alternate"/><content>RobinHood: tail latency aware caching – dynamic reallocation from cache-rich to cache-poor</content></entry><entry><title>Noria: dynamic, partially-stateful data-flow for high-performance web applications</title><id>https://blog.acolyer.org/2018/10/29/noria-dynamic-partially-stateful-data-flow-for-high-performance-web-applications/</id><updated>2025-07-19T15:16:24.707260585+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/29/noria-dynamic-partially-stateful-data-flow-for-high-performance-web-applications/" rel="alternate"/><content>Noria: dynamic, partially-stateful data-flow for high-performance web applications</content></entry><entry><title>Moment-based quantile sketches for efficient high cardinality aggregation queries</title><id>https://blog.acolyer.org/2018/10/31/moment-based-quantile-sketches-for-efficient-high-cardinality-aggregation-queries/</id><updated>2025-07-20T15:16:22.466146170+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/31/moment-based-quantile-sketches-for-efficient-high-cardinality-aggregation-queries/" rel="alternate"/><content>Moment-based quantile sketches for efficient high cardinality aggregation queries</content></entry><entry><title>The FuzzyLog: a partially ordered shared log</title><id>https://blog.acolyer.org/2018/11/02/the-fuzzylog-a-partially-ordered-shared-log/</id><updated>2025-07-21T15:18:51.333709219+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/11/02/the-fuzzylog-a-partially-ordered-shared-log/" rel="alternate"/><content>The FuzzyLog: a partially ordered shared log</content></entry><entry><title>Sharding the shards: managing datastore locality at scale with Akkio</title><id>https://blog.acolyer.org/2018/11/05/sharding-the-shards-managing-datastore-locality-at-scale-with-akkio/</id><updated>2025-07-22T15:19:30.069476201+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/11/05/sharding-the-shards-managing-datastore-locality-at-scale-with-akkio/" rel="alternate"/><content>Sharding the shards: managing datastore locality at scale with Akkio</content></entry><entry><title>ASAP: fast, approximate graph pattern mining at scale</title><id>https://blog.acolyer.org/2018/11/07/asap-fast-approximate-graph-pattern-mining-at-scale/</id><updated>2025-07-23T15:19:43.701170414+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/11/07/asap-fast-approximate-graph-pattern-mining-at-scale/" rel="alternate"/><content>ASAP: fast, approximate graph pattern mining at scale</content></entry><entry><title>ApproxJoin: approximate distributed joins</title><id>https://blog.acolyer.org/2018/11/09/approxjoin-approximate-distributed-joins/</id><updated>2025-07-24T15:17:38.503972090+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/11/09/approxjoin-approximate-distributed-joins/" rel="alternate"/><content>ApproxJoin: approximate distributed joins</content></entry><entry><title>Debugging distributed systems with why-across-time provenance</title><id>https://blog.acolyer.org/2018/11/12/debugging-distributed-systems-with-why-across-time-provenance/</id><updated>2025-07-25T15:18:56.801652394+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/11/12/debugging-distributed-systems-with-why-across-time-provenance/" rel="alternate"/><content>Debugging distributed systems with why-across-time provenance</content></entry><entry><title>Unikernels as processes</title><id>https://blog.acolyer.org/2018/11/14/unikernels-as-processes/</id><updated>2025-07-26T15:16:39.858328875+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/11/14/unikernels-as-processes/" rel="alternate"/><content>Unikernels as processes</content></entry></feed>