<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Improving the expressiveness of deep learning frameworks with recursion</title><id>https://blog.acolyer.org/2018/06/11/improving-the-expressiveness-of-deep-learning-frameworks-with-recursion/</id><updated>2025-05-22T15:17:23.704252508+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/11/improving-the-expressiveness-of-deep-learning-frameworks-with-recursion/" rel="alternate"/><content>Improving the expressiveness of deep learning frameworks with recursion</content></entry><entry><title>Optimus: an efficient dynamic resource scheduler for deep learning clusters</title><id>https://blog.acolyer.org/2018/06/12/optimus-an-efficient-dynamic-resource-scheduler-for-deep-learning-clusters/</id><updated>2025-05-23T15:16:36.667892813+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/12/optimus-an-efficient-dynamic-resource-scheduler-for-deep-learning-clusters/" rel="alternate"/><content>Optimus: an efficient dynamic resource scheduler for deep learning clusters</content></entry><entry><title>Medea: scheduling of long running applications in shared production clusters</title><id>https://blog.acolyer.org/2018/06/13/medea-scheduling-of-long-running-applications-in-shared-production-clusters/</id><updated>2025-05-24T15:14:25.738179611+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/13/medea-scheduling-of-long-running-applications-in-shared-production-clusters/" rel="alternate"/><content>Medea: scheduling of long running applications in shared production clusters</content></entry><entry><title>Analytics with smart arrays: adaptive and efficient language-independent data</title><id>https://blog.acolyer.org/2018/06/14/analytics-with-smart-arrays-adaptive-and-efficient-language-independent-data/</id><updated>2025-05-25T15:14:40.748920248+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/14/analytics-with-smart-arrays-adaptive-and-efficient-language-independent-data/" rel="alternate"/><content>Analytics with smart arrays: adaptive and efficient language-independent data</content></entry><entry><title>Popular is cheaper: curtailing memory costs in interactive analytics engines</title><id>https://blog.acolyer.org/2018/06/15/popular-is-cheaper-curtailing-memory-costs-in-interactive-analytics-engines/</id><updated>2025-05-26T15:16:42.562180827+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/15/popular-is-cheaper-curtailing-memory-costs-in-interactive-analytics-engines/" rel="alternate"/><content>Popular is cheaper: curtailing memory costs in interactive analytics engines</content></entry><entry><title>DeepTest: automated testing of deep-neural-network-driven autonomous cars</title><id>https://blog.acolyer.org/2018/06/18/deeptest-automated-testing-of-deep-neural-network-driven-autonomous-cars/</id><updated>2025-05-27T15:17:39.801005223+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/18/deeptest-automated-testing-of-deep-neural-network-driven-autonomous-cars/" rel="alternate"/><content>DeepTest: automated testing of deep-neural-network-driven autonomous cars</content></entry><entry><title>Debugging with intelligence via probabilistic inference</title><id>https://blog.acolyer.org/2018/06/19/debugging-with-intelligence-via-probabilistic-inference/</id><updated>2025-05-28T15:16:21.397885326+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/19/debugging-with-intelligence-via-probabilistic-inference/" rel="alternate"/><content>Debugging with intelligence via probabilistic inference</content></entry><entry><title>ConflictJS: finding and understanding conflicts between JavaScript libraries</title><id>https://blog.acolyer.org/2018/06/20/conflictjs-finding-and-understanding-conflicts-between-javascript-libraries/</id><updated>2025-05-29T15:16:59.052640263+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/20/conflictjs-finding-and-understanding-conflicts-between-javascript-libraries/" rel="alternate"/><content>ConflictJS: finding and understanding conflicts between JavaScript libraries</content></entry><entry><title>Generalized data structure synthesis</title><id>https://blog.acolyer.org/2018/06/21/generalized-data-structure-synthesis/</id><updated>2025-05-30T15:16:43.639645608+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/21/generalized-data-structure-synthesis/" rel="alternate"/><content>Generalized data structure synthesis</content></entry><entry><title>Automated localization for unreproducible builds</title><id>https://blog.acolyer.org/2018/06/22/automated-localization-for-unreproducible-builds/</id><updated>2025-05-31T15:14:53.174620255+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/06/22/automated-localization-for-unreproducible-builds/" rel="alternate"/><content>Automated localization for unreproducible builds</content></entry></feed>