<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>HCloud: Resource-efficient provisioning in shared cloud systems</title><id>https://blog.acolyer.org/2016/05/26/hcloud-resource-efficient-provisioning-in-shared-cloud-systems/</id><updated>2024-03-03T15:10:54.585309454+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/05/26/hcloud-resource-efficient-provisioning-in-shared-cloud-systems/" rel="alternate"/><content>HCloud: Resource-efficient provisioning in shared cloud systems</content></entry><entry><title>A DNA-based archival storage system</title><id>https://blog.acolyer.org/2016/05/27/a-dna-based-archival-storage-system/</id><updated>2024-03-04T15:12:36.094698990+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/05/27/a-dna-based-archival-storage-system/" rel="alternate"/><content>A DNA-based archival storage system</content></entry><entry><title>Why do record/replay tests of web applications break?</title><id>https://blog.acolyer.org/2016/05/30/why-do-recordreplay-tests-of-web-applications-break/</id><updated>2024-03-05T15:11:08.789037171+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/05/30/why-do-recordreplay-tests-of-web-applications-break/" rel="alternate"/><content>Why do record/replay tests of web applications break?</content></entry><entry><title>How to build static checking systems using orders of magnitude less code</title><id>https://blog.acolyer.org/2016/05/31/how-to-build-static-checking-systems-using-orders-of-magnitude-less-code/</id><updated>2024-03-06T15:13:20.008720547+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/05/31/how-to-build-static-checking-systems-using-orders-of-magnitude-less-code/" rel="alternate"/><content>How to build static checking systems using orders of magnitude less code</content></entry><entry><title>Distributed representations of sentences and documents</title><id>https://blog.acolyer.org/2016/06/01/distributed-representations-of-sentences-and-documents/</id><updated>2024-03-07T15:11:37.289466823+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/01/distributed-representations-of-sentences-and-documents/" rel="alternate"/><content>Distributed representations of sentences and documents</content></entry><entry><title>Sequence to sequence learning with neural networks</title><id>https://blog.acolyer.org/2016/06/02/sequence-to-sequence-learning-with-neural-networks/</id><updated>2024-03-08T15:11:53.540167823+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/02/sequence-to-sequence-learning-with-neural-networks/" rel="alternate"/><content>Sequence to sequence learning with neural networks</content></entry><entry><title>Semi-supervised sequence learning</title><id>https://blog.acolyer.org/2016/06/03/semi-supervised-sequence-learning/</id><updated>2024-03-09T15:09:42.905746830+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/03/semi-supervised-sequence-learning/" rel="alternate"/><content>Semi-supervised sequence learning</content></entry><entry><title>From Aristotle to Ringelmann</title><id>https://blog.acolyer.org/2016/06/06/from-aristotle-to-ringelmann/</id><updated>2024-03-10T15:09:43.901117093+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/06/from-aristotle-to-ringelmann/" rel="alternate"/><content>From Aristotle to Ringelmann</content></entry><entry><title>BigDebug: Debugging primitives for interactive big data processing in Spark</title><id>https://blog.acolyer.org/2016/06/07/bigdebug-debugging-primitives-for-interactive-big-data-processing-in-spark/</id><updated>2024-03-11T15:12:18.989628063+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/07/bigdebug-debugging-primitives-for-interactive-big-data-processing-in-spark/" rel="alternate"/><content>BigDebug: Debugging primitives for interactive big data processing in Spark</content></entry><entry><title>On the “naturalness” of buggy code</title><id>https://blog.acolyer.org/2016/06/08/on-the-naturalness-of-buggy-code/</id><updated>2024-03-12T15:11:10.980622900+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/06/08/on-the-naturalness-of-buggy-code/" rel="alternate"/><content>On the “naturalness” of buggy code</content></entry></feed>