<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Automatic discovery of tactics in spatio-temporal soccer match data</title><id>https://blog.acolyer.org/2018/10/12/automatic-discovery-of-tactics-in-spatio-temporal-soccer-match-data/</id><updated>2025-07-12T15:16:22.775521273+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/12/automatic-discovery-of-tactics-in-spatio-temporal-soccer-match-data/" rel="alternate"/><content>Automatic discovery of tactics in spatio-temporal soccer match data</content></entry><entry><title>Capturing and enhancing in situ system observability for failure detection</title><id>https://blog.acolyer.org/2018/10/15/capturing-and-enhancing-in-situ-system-observability-for-failure-detection/</id><updated>2025-07-13T15:16:02.940825133+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/15/capturing-and-enhancing-in-situ-system-observability-for-failure-detection/" rel="alternate"/><content>Capturing and enhancing in situ system observability for failure detection</content></entry><entry><title>REPT: reverse debugging of failures in deployed software</title><id>https://blog.acolyer.org/2018/10/17/rept-reverse-debugging-of-failures-in-deployed-software/</id><updated>2025-07-14T15:18:57.673047613+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/17/rept-reverse-debugging-of-failures-in-deployed-software/" rel="alternate"/><content>REPT: reverse debugging of failures in deployed software</content></entry><entry><title>Orca: differential bug localization in large-scale services</title><id>https://blog.acolyer.org/2018/10/19/orca-differential-bug-localization-in-large-scale-services/</id><updated>2025-07-15T15:17:19.311688933+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/19/orca-differential-bug-localization-in-large-scale-services/" rel="alternate"/><content>Orca: differential bug localization in large-scale services</content></entry><entry><title>LegoOS: a disseminated, distributed OS for hardware resource disaggregation</title><id>https://blog.acolyer.org/2018/10/22/legoos-a-disseminated-distributed-os-for-hardware-resource-disaggregation/</id><updated>2025-07-16T15:19:04.146490625+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/22/legoos-a-disseminated-distributed-os-for-hardware-resource-disaggregation/" rel="alternate"/><content>LegoOS: a disseminated, distributed OS for hardware resource disaggregation</content></entry><entry><title>Maelstrom: mitigating datacenter-level disasters by draining interdependent traffic safely and efficiently</title><id>https://blog.acolyer.org/2018/10/24/maelstrom-mitigating-datacenter-level-disasters-by-draining-interdependent-traffic-safely-and-efficiently/</id><updated>2025-07-17T15:18:54.043625068+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/24/maelstrom-mitigating-datacenter-level-disasters-by-draining-interdependent-traffic-safely-and-efficiently/" rel="alternate"/><content>Maelstrom: mitigating datacenter-level disasters by draining interdependent traffic safely and efficiently</content></entry><entry><title>RobinHood: tail latency aware caching – dynamic reallocation from cache-rich to cache-poor</title><id>https://blog.acolyer.org/2018/10/26/robinhood-tail-latency-aware-caching-dynamic-reallocation-from-cache-rich-to-cache-poor/</id><updated>2025-07-18T15:17:49.498680731+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/26/robinhood-tail-latency-aware-caching-dynamic-reallocation-from-cache-rich-to-cache-poor/" rel="alternate"/><content>RobinHood: tail latency aware caching – dynamic reallocation from cache-rich to cache-poor</content></entry><entry><title>Noria: dynamic, partially-stateful data-flow for high-performance web applications</title><id>https://blog.acolyer.org/2018/10/29/noria-dynamic-partially-stateful-data-flow-for-high-performance-web-applications/</id><updated>2025-07-19T15:16:24.707260585+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/29/noria-dynamic-partially-stateful-data-flow-for-high-performance-web-applications/" rel="alternate"/><content>Noria: dynamic, partially-stateful data-flow for high-performance web applications</content></entry><entry><title>Moment-based quantile sketches for efficient high cardinality aggregation queries</title><id>https://blog.acolyer.org/2018/10/31/moment-based-quantile-sketches-for-efficient-high-cardinality-aggregation-queries/</id><updated>2025-07-20T15:16:22.466146170+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/10/31/moment-based-quantile-sketches-for-efficient-high-cardinality-aggregation-queries/" rel="alternate"/><content>Moment-based quantile sketches for efficient high cardinality aggregation queries</content></entry><entry><title>The FuzzyLog: a partially ordered shared log</title><id>https://blog.acolyer.org/2018/11/02/the-fuzzylog-a-partially-ordered-shared-log/</id><updated>2025-07-21T15:18:51.333709219+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2018/11/02/the-fuzzylog-a-partially-ordered-shared-log/" rel="alternate"/><content>The FuzzyLog: a partially ordered shared log</content></entry></feed>