<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>The Heard-Of Model: Computing in Distributed Systems with Benign Failures</title><id>https://blog.acolyer.org/2016/02/09/the-heard-of-model/</id><updated>2023-12-26T15:11:09.957196148+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/09/the-heard-of-model/" rel="alternate"/><content>The Heard-Of Model: Computing in Distributed Systems with Benign Failures</content></entry><entry><title>How Complex Systems Fail</title><id>https://blog.acolyer.org/2016/02/10/how-complex-systems-fail/</id><updated>2023-12-27T15:11:21.517821496+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/10/how-complex-systems-fail/" rel="alternate"/><content>How Complex Systems Fail</content></entry><entry><title>All File Systems are Not Created Equal:  On the Complexity of Crafting Crash Consistent Applications</title><id>https://blog.acolyer.org/2016/02/11/fs-not-equal/</id><updated>2023-12-28T15:11:34.795361182+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/11/fs-not-equal/" rel="alternate"/><content>All File Systems are Not Created Equal:  On the Complexity of Crafting Crash Consistent Applications</content></entry><entry><title>Using Crash Hoare Logic for Certifying the FSCQ File System</title><id>https://blog.acolyer.org/2016/02/12/fscq/</id><updated>2023-12-29T15:11:23.266072814+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/12/fscq/" rel="alternate"/><content>Using Crash Hoare Logic for Certifying the FSCQ File System</content></entry><entry><title>A Short Note on Atomicity and Ordering</title><id>https://blog.acolyer.org/2016/02/15/a-short-note-on-atomicity-and-ordering/</id><updated>2023-12-30T15:10:22.184138558+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/15/a-short-note-on-atomicity-and-ordering/" rel="alternate"/><content>A Short Note on Atomicity and Ordering</content></entry><entry><title>Capability Myths Demolished</title><id>https://blog.acolyer.org/2016/02/16/capability-myths-demolished/</id><updated>2023-12-31T15:10:30.710400161+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/16/capability-myths-demolished/" rel="alternate"/><content>Capability Myths Demolished</content></entry><entry><title>Deny Capabilities for Safe, Fast Actors</title><id>https://blog.acolyer.org/2016/02/17/deny-capabilities/</id><updated>2024-01-01T15:11:25.603402233+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/17/deny-capabilities/" rel="alternate"/><content>Deny Capabilities for Safe, Fast Actors</content></entry><entry><title>Ownership and Reference Counting Based Garbage Collection in the Actor World</title><id>https://blog.acolyer.org/2016/02/18/ownership-and-reference-counting-based-garbage-collection-in-the-actor-world/</id><updated>2024-01-02T15:12:03.430179616+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/18/ownership-and-reference-counting-based-garbage-collection-in-the-actor-world/" rel="alternate"/><content>Ownership and Reference Counting Based Garbage Collection in the Actor World</content></entry><entry><title>Formal Requirements for Virtualizable Third Generation Architectures</title><id>https://blog.acolyer.org/2016/02/19/formal-requirements-for-virtualizable-third-generation-architectures/</id><updated>2024-01-03T15:11:49.371656102+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/19/formal-requirements-for-virtualizable-third-generation-architectures/" rel="alternate"/><content>Formal Requirements for Virtualizable Third Generation Architectures</content></entry><entry><title>IncludeOS: A minimal, resource efficient unikernel for cloud systems</title><id>https://blog.acolyer.org/2016/02/22/includeos/</id><updated>2024-01-04T15:12:51.191605113+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2016/02/22/includeos/" rel="alternate"/><content>IncludeOS: A minimal, resource efficient unikernel for cloud systems</content></entry></feed>