<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>App-Bisect: Autonomous healing for microservices-based apps</title><id>https://blog.acolyer.org/2015/10/09/app-bisect-autonomous-healing-for-microservices-based-apps/</id><updated>2023-10-11T15:11:27.295121657+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/09/app-bisect-autonomous-healing-for-microservices-based-apps/" rel="alternate"/><content>App-Bisect: Autonomous healing for microservices-based apps</content></entry><entry><title>Failure Sketching: A Technique for Automated Root Cause Diagnosis of In-Production Failures</title><id>https://blog.acolyer.org/2015/10/12/failure-sketching-a-technique-for-automated-root-cause-diagnosis-of-in-production-failures/</id><updated>2023-10-12T15:12:04.790423338+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/12/failure-sketching-a-technique-for-automated-root-cause-diagnosis-of-in-production-failures/" rel="alternate"/><content>Failure Sketching: A Technique for Automated Root Cause Diagnosis of In-Production Failures</content></entry><entry><title>Pivot Tracing: Dynamic Causal Monitoring for Distributed Systems</title><id>https://blog.acolyer.org/2015/10/13/pivot-tracing-dynamic-causal-monitoring-for-distributed-systems/</id><updated>2023-10-13T15:12:27.540658507+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/13/pivot-tracing-dynamic-causal-monitoring-for-distributed-systems/" rel="alternate"/><content>Pivot Tracing: Dynamic Causal Monitoring for Distributed Systems</content></entry><entry><title>Coz: Finding code that counts with causal profiling</title><id>https://blog.acolyer.org/2015/10/14/coz-finding-code-that-counts-with-causal-profling/</id><updated>2023-10-14T15:10:33.887925483+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/14/coz-finding-code-that-counts-with-causal-profling/" rel="alternate"/><content>Coz: Finding code that counts with causal profiling</content></entry><entry><title>IronFleet: Proving Practical Distributed Systems Correct</title><id>https://blog.acolyer.org/2015/10/15/ironfleet-proving-practical-distributed-systems-correc/</id><updated>2023-10-15T15:10:30.593165839+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/15/ironfleet-proving-practical-distributed-systems-correc/" rel="alternate"/><content>IronFleet: Proving Practical Distributed Systems Correct</content></entry><entry><title>Holistic Configuration Management at Facebook</title><id>https://blog.acolyer.org/2015/10/16/holistic-configuration-management-at-facebook/</id><updated>2023-10-16T15:12:56.308421031+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/16/holistic-configuration-management-at-facebook/" rel="alternate"/><content>Holistic Configuration Management at Facebook</content></entry><entry><title>Existential Consistency: Measuring and Understanding Consistency at Facebook</title><id>https://blog.acolyer.org/2015/10/19/existential-consistency-measuring-and-understanding-consistency-at-facebook/</id><updated>2023-10-17T15:12:48.766616992+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/19/existential-consistency-measuring-and-understanding-consistency-at-facebook/" rel="alternate"/><content>Existential Consistency: Measuring and Understanding Consistency at Facebook</content></entry><entry><title>High-Performance ACID via Modular Concurrency Control</title><id>https://blog.acolyer.org/2015/10/20/high-performance-acid-via-modular-concurrency-control/</id><updated>2023-10-18T15:12:30.815547536+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/20/high-performance-acid-via-modular-concurrency-control/" rel="alternate"/><content>High-Performance ACID via Modular Concurrency Control</content></entry><entry><title>Building Consistent Transactions with Inconsistent Replication</title><id>https://blog.acolyer.org/2015/10/21/building-consistent-transactions-with-inconsistent-replication/</id><updated>2023-10-19T15:12:39.279037770+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/21/building-consistent-transactions-with-inconsistent-replication/" rel="alternate"/><content>Building Consistent Transactions with Inconsistent Replication</content></entry><entry><title>Implementing Linearizability at Large Scale and Low Latency</title><id>https://blog.acolyer.org/2015/10/22/implementing-linearizability-at-large-scale-and-low-latency/</id><updated>2023-10-20T15:10:31.795981577+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/10/22/implementing-linearizability-at-large-scale-and-low-latency/" rel="alternate"/><content>Implementing Linearizability at Large Scale and Low Latency</content></entry></feed>