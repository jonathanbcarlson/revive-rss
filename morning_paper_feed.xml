<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>SageDB: a learned database system</title><id>https://blog.acolyer.org/2019/01/16/sagedb-a-learned-database-system/</id><updated>2025-08-16T15:14:53.945961714+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/16/sagedb-a-learned-database-system/" rel="alternate"/><content>SageDB: a learned database system</content></entry><entry><title>Towards a hands-free query optimizer through deep learning</title><id>https://blog.acolyer.org/2019/01/18/towards-a-hands-free-query-optimizer-through-deep-learning/</id><updated>2025-08-17T15:15:32.053008957+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/18/towards-a-hands-free-query-optimizer-through-deep-learning/" rel="alternate"/><content>Towards a hands-free query optimizer through deep learning</content></entry><entry><title>Design continuums and the path toward self-designing key-value stores that know and learn</title><id>https://blog.acolyer.org/2019/01/21/design-continuums-and-the-path-toward-self-designing-key-value-stores-that-know-and-learn/</id><updated>2025-08-18T15:18:31.629989620+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/21/design-continuums-and-the-path-toward-self-designing-key-value-stores-that-know-and-learn/" rel="alternate"/><content>Design continuums and the path toward self-designing key-value stores that know and learn</content></entry><entry><title>The data calculator: data structure design and cost synthesis from first principles and learned cost models</title><id>https://blog.acolyer.org/2019/01/23/the-data-calculator-data-structure-design-and-cost-synthesis-from-first-principles-and-learned-cost-models/</id><updated>2025-08-19T15:17:40.668271515+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/23/the-data-calculator-data-structure-design-and-cost-synthesis-from-first-principles-and-learned-cost-models/" rel="alternate"/><content>The data calculator: data structure design and cost synthesis from first principles and learned cost models</content></entry><entry><title>Programming paradigms for dummies: what every programmer should know</title><id>https://blog.acolyer.org/2019/01/25/programming-paradigms-for-dummies-what-every-programmer-should-know/</id><updated>2025-08-20T15:17:06.670653927+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/25/programming-paradigms-for-dummies-what-every-programmer-should-know/" rel="alternate"/><content>Programming paradigms for dummies: what every programmer should know</content></entry><entry><title>The case for network-accelerated query processing</title><id>https://blog.acolyer.org/2019/01/28/the-case-for-network-accelerated-query-processing/</id><updated>2025-08-21T15:17:39.092869836+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/28/the-case-for-network-accelerated-query-processing/" rel="alternate"/><content>The case for network-accelerated query processing</content></entry><entry><title>Veritas: shared verifiable databases and tables in the cloud</title><id>https://blog.acolyer.org/2019/01/30/veritas-shared-verifiable-databases-and-tables-in-the-cloud/</id><updated>2025-08-22T15:16:32.909046765+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/01/30/veritas-shared-verifiable-databases-and-tables-in-the-cloud/" rel="alternate"/><content>Veritas: shared verifiable databases and tables in the cloud</content></entry><entry><title>Fixed it for you: protocol repair using lineage graphs</title><id>https://blog.acolyer.org/2019/02/01/fixed-it-for-you-protocol-repair-using-lineage-graphs/</id><updated>2025-08-23T15:14:03.339318720+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/02/01/fixed-it-for-you-protocol-repair-using-lineage-graphs/" rel="alternate"/><content>Fixed it for you: protocol repair using lineage graphs</content></entry><entry><title>TensorFlow.js: machine learning for the web and beyond</title><id>https://blog.acolyer.org/2019/02/04/tensorflow-js-machine-learning-for-the-web-and-beyond/</id><updated>2025-08-24T15:14:23.738885898+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/02/04/tensorflow-js-machine-learning-for-the-web-and-beyond/" rel="alternate"/><content>TensorFlow.js: machine learning for the web and beyond</content></entry><entry><title>A comprehensive survey on graph neural networks</title><id>https://blog.acolyer.org/2019/02/06/a-comprehensive-survey-on-graph-neural-networks/</id><updated>2025-08-25T15:17:23.337625889+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2019/02/06/a-comprehensive-survey-on-graph-neural-networks/" rel="alternate"/><content>A comprehensive survey on graph neural networks</content></entry></feed>