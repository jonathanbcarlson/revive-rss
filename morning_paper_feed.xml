<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morning Paper</title><id>https://blog.acolyer.org/</id><updated>2023-04-14T06:03:06.609159824+00:00</updated><author><name>Adrian Colyer</name></author><icon>https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=32</icon><entry><title>Twitter Heron: Stream Processing at Scale</title><id>https://blog.acolyer.org/2015/06/15/twitter-heron-stream-processing-at-scale/</id><updated>2023-08-11T15:11:21.241890492+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/15/twitter-heron-stream-processing-at-scale/" rel="alternate"/><content>Twitter Heron: Stream Processing at Scale</content></entry><entry><title>Heracles: Improving Resource Efficiency at Scale</title><id>https://blog.acolyer.org/2015/06/16/heracles-improving-resource-efficiency-at-scale/</id><updated>2023-08-12T15:10:08.431427185+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/16/heracles-improving-resource-efficiency-at-scale/" rel="alternate"/><content>Heracles: Improving Resource Efficiency at Scale</content></entry><entry><title>Differential Dataflow</title><id>https://blog.acolyer.org/2015/06/17/differential-dataflow/</id><updated>2023-08-13T15:10:17.211517497+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/17/differential-dataflow/" rel="alternate"/><content>Differential Dataflow</content></entry><entry><title>Spinning Fast Iterative Dataflows</title><id>https://blog.acolyer.org/2015/06/18/spinning-fast-iterative-dataflows/</id><updated>2023-08-14T15:10:54.451682404+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/18/spinning-fast-iterative-dataflows/" rel="alternate"/><content>Spinning Fast Iterative Dataflows</content></entry><entry><title>Discretized Streams: Fault Tolerant Stream Computing at Scale</title><id>https://blog.acolyer.org/2015/06/19/discretized-streams-fault-tolerant-stream-computing-at-scale/</id><updated>2023-08-15T15:11:43.546453099+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/19/discretized-streams-fault-tolerant-stream-computing-at-scale/" rel="alternate"/><content>Discretized Streams: Fault Tolerant Stream Computing at Scale</content></entry><entry><title>How Much Up-Front? A Grounded Theory of Agile Architecture</title><id>https://blog.acolyer.org/2015/06/22/how-much-up-front-a-grounded-theory-of-agile-architecture/</id><updated>2023-08-16T15:11:29.781670585+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/22/how-much-up-front-a-grounded-theory-of-agile-architecture/" rel="alternate"/><content>How Much Up-Front? A Grounded Theory of Agile Architecture</content></entry><entry><title>Work Practices and Challenges in Pull-Based Development</title><id>https://blog.acolyer.org/2015/06/23/work-practices-and-challenges-in-pull-based-development/</id><updated>2023-08-17T15:11:04.211524645+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/23/work-practices-and-challenges-in-pull-based-development/" rel="alternate"/><content>Work Practices and Challenges in Pull-Based Development</content></entry><entry><title>When and Why Your Code Starts to Smell Bad</title><id>https://blog.acolyer.org/2015/06/24/when-and-why-your-code-starts-to-smell-bad/</id><updated>2023-08-18T15:11:12.295628807+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/24/when-and-why-your-code-starts-to-smell-bad/" rel="alternate"/><content>When and Why Your Code Starts to Smell Bad</content></entry><entry><title>The Art of Testing Less Without Sacrificing Quality</title><id>https://blog.acolyer.org/2015/06/25/the-art-of-testing-less-without-sacrificing-quality/</id><updated>2023-08-19T15:10:30.955653147+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/25/the-art-of-testing-less-without-sacrificing-quality/" rel="alternate"/><content>The Art of Testing Less Without Sacrificing Quality</content></entry><entry><title>Helping Developers Help Themselves: Automatic Decomposition of Code Review Changes</title><id>https://blog.acolyer.org/2015/06/26/helping-developers-help-themselves-automatic-decomposition-of-code-review-changes/</id><updated>2023-08-20T15:09:57.962427633+00:00</updated><author><name>Adrian Colyer</name></author><link href="https://blog.acolyer.org/2015/06/26/helping-developers-help-themselves-automatic-decomposition-of-code-review-changes/" rel="alternate"/><content>Helping Developers Help Themselves: Automatic Decomposition of Code Review Changes</content></entry></feed>